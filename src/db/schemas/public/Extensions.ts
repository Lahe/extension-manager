// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import type { ColumnType, Selectable, Insertable, Updateable } from 'kysely';
import { z } from 'zod';

/** Identifier type for public.extensions */
export type ExtensionsId = number;

/** Represents the table public.extensions */
export default interface ExtensionsTable {
  id: ColumnType<ExtensionsId, never, never>;

  name: ColumnType<string, string, string>;

  description: ColumnType<string | null, string | null, string | null>;

  logo: ColumnType<string, string, string>;

  isActive: ColumnType<boolean, boolean | undefined, boolean>;

  createdAt: ColumnType<Date, Date | string | undefined, Date | string>;

  updatedAt: ColumnType<Date, Date | string | undefined, Date | string>;
}

export type Extensions = Selectable<ExtensionsTable>;

export type NewExtensions = Insertable<ExtensionsTable>;

export type ExtensionsUpdate = Updateable<ExtensionsTable>;

export const extensionsId = z.number().transform(value => value as ExtensionsId);

export const extensions = z.object({
  id: extensionsId,
  name: z.string(),
  description: z.string().nullable(),
  logo: z.string(),
  isActive: z.boolean(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const extensionsInitializer = z.object({
  id: extensionsId.optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  logo: z.string(),
  isActive: z.boolean().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

export const extensionsMutator = z.object({
  id: extensionsId.optional(),
  name: z.string().optional(),
  description: z.string().optional().nullable(),
  logo: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});
